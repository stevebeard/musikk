#!/usr/bin/env python3
import argparse
import os
import pathlib
import sys

from musikk import player, metadata, queue

running = True
playing = True
_player = player.Player()
_queue = queue.Queue()

def main():
    parser = argparse.ArgumentParser(
        prog='Musikk',
        description='A simple command line music player.'
    )
    parser.add_argument('filepath', nargs='+')
    args = parser.parse_args()
    # print(args)
    absfilepaths = []
    for filepath in args.filepath:
        absfilepaths.append(os.path.abspath(filepath))
    _queue.add_items(absfilepaths)
    first = _queue.get_current()
    _player.play_uri(__to_uri(first))
    track = metadata.get_track_metadata(first)
    print_track_info(track)
    while running:
        command = input('> ')
        if command in ['q','quit']:
            print('Quitting...')
            close()
        elif command is 'p':
            if playing:
                pause()
            else:
                play()
        elif command == 'pause':
            pause()
        elif command == 'play':
            play()
        elif command in ['s', 'stop']:
            stop()
        elif command in ['N', 'next']:
            next()
        elif command in ['P', 'prev']:
            previous()
        else:
            print('Unrecognised Command: ' + command)

def print_track_info(track):
    print('{} - {} - {}'.format(
        check_metadata(track.title), 
        check_metadata(track.artist), 
        check_metadata(track.album)
    ))

def check_metadata(field):
    if field == '':
        return 'Unknown'
    return field

def play():
    _player.play()
    global playing
    playing = True

def pause():
    _player.pause()
    global playing
    playing = False

def next():
    _next = _queue.next()
    if _next is not None:
        _player.play_uri(__to_uri(_next))
        track = metadata.get_track_metadata(_next)
        print_track_info(track)

def previous():
    _previous = _queue.previous()
    if _previous is not None:
        _player.play_uri(__to_uri(_previous))
        track = metadata.get_track_metadata(_previous)
        print_track_info(track)

def stop():
    _player.stop()
    global playing
    playing = False

def close():
    _player.close()
    global playing
    global running
    playing = False
    running = False

def __to_uri(filepath):
    return pathlib.Path(filepath).as_uri()

if __name__ == '__main__':
    main()